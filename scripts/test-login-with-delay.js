// test-login-with-delay.js\nconst fetch = require('node-fetch');\nconst CookieJar = require('tough-cookie').CookieJar;\nconst fetchCookie = require('fetch-cookie');\n\nasync function testLoginWithDelay() {\n    try {\n        console.log('Testing login with cookie handling...');\n        \n        // Create a cookie jar to maintain cookies\n        const cookieJar = new CookieJar();\n        const fetchWithCookies = fetchCookie(fetch, cookieJar);\n        \n        // Login\n        console.log('Logging in...');\n        const loginResponse = await fetchWithCookies('http://localhost:3500/api/auth/login', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ \n                email: 'purwadi@tabeldata.com', \n                password: 'AdminPassword123!!'\n            }),\n        });\n\n        const loginData = await loginResponse.json();\n        console.log('Login Status:', loginResponse.status);\n        console.log('Login Data:', loginData);\n        \n        if (!loginResponse.ok) {\n            console.log('Login failed:', loginData.message);\n            return;\n        }\n        \n        // Check cookies\n        console.log('\\nCookies after login:');\n        const cookies = cookieJar.getCookiesSync('http://localhost:3500');\n        cookies.forEach(cookie => {\n            console.log(`  ${cookie.key} = ${cookie.value}`);\n        });\n        \n        // Small delay to ensure cookie is properly set\n        console.log('\\nWaiting 100ms for cookie to be processed...');\n        await new Promise(resolve => setTimeout(resolve, 100));\n        \n        // Test accessing admin dashboard\n        console.log('\\nTesting access to admin dashboard...');\n        const dashboardResponse = await fetchWithCookies('http://localhost:3500/admin/dashboard');\n        \n        console.log('Dashboard Status:', dashboardResponse.status);\n        console.log('Dashboard Headers:', Object.fromEntries(dashboardResponse.headers));\n        \n        // Get first 200 characters of response\n        const dashboardText = await dashboardResponse.text();\n        console.log('Dashboard Content Start:', dashboardText.substring(0, 200));\n        \n        if (dashboardResponse.status === 200) {\n            console.log('✅ SUCCESS: Admin dashboard loaded correctly!');\n        } else {\n            console.log('❌ FAILED: Could not access admin dashboard');\n        }\n        \n    } catch (error) {\n        console.error('Error testing login:', error);\n    }\n}\n\ntestLoginWithDelay();